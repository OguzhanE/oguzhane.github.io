<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Oguzhan Ergin</title>
    <link>http://oguzhane.github.io/blog/index.xml</link>
    <description>Recent content in Blog on Oguzhan Ergin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 28 Dec 2016 23:32:14 +0300</lastBuildDate>
    <atom:link href="http://oguzhane.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Rolling Hash</title>
      <link>http://oguzhane.github.io/blog/rolling-hash/</link>
      <pubDate>Wed, 28 Dec 2016 23:32:14 +0300</pubDate>
      
      <guid>http://oguzhane.github.io/blog/rolling-hash/</guid>
      <description>

&lt;p&gt;&lt;code&gt;Recursive hashing&lt;/code&gt; veya &lt;code&gt;rolling checksum&lt;/code&gt; olarak da bilinen &lt;code&gt;rolling hash&lt;/code&gt; input olarak verilen stringin tümünü işleme tabii tutmadan hash degerini hesaplamaya olanak tanıyan bir hash fonksiyonudur. Bunun avantajını bir örnek üzerinden açıklayalım.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Elimizde &lt;code&gt;X&lt;/code&gt; ve &lt;code&gt;Y&lt;/code&gt; değişkenleri olsun ve string degerleri tutsunlar. Problemimiz şu şekilde:
&lt;code&gt;X&lt;/code&gt;in degeri &lt;code&gt;Y&lt;/code&gt;nin degeri ile aynı mı?Karşılaştırın. Bunun için bize kesin cevabı veren maliyetli yöntemimiz şu şekilde: &lt;code&gt;Y&lt;/code&gt; stringinin her bir karakterini &lt;code&gt;X&lt;/code&gt; stringinin o indisteki karakteriyle karşılaştırmak. İşte bu yöntem maliyetli, çirkin bir yöntem. Olabildiğince bundan kaçınmamız gerek, bu aşamaya varmadan daha az maliyetli bir yöntemle &lt;code&gt;evet(aynı)&lt;/code&gt; veya &lt;code&gt;hayır(farklı)&lt;/code&gt; sonuçlarına ulaşabiliyorsak ulaşmamız gerek.
Daha iyi anlamak için X ve Y değişkenleri şunun gibi olsun.
&lt;code&gt;X=&amp;quot;abc&amp;quot;&lt;/code&gt;
&lt;code&gt;Y=&amp;quot;bcd&amp;quot;&lt;/code&gt;
değişkenlerin değerlerine bakarak; &lt;code&gt;hayır bcd stringi abc stringi ile aynı değil&lt;/code&gt; diyebiliriz.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Değişkenleri basit bir hash fonksiyonuna tabii tutalım.
$H_1 = H(abc) = a*7^0 +  b*7^1 + c*7^2 = 97*1+98*7+99*49=5634$
$H_1 = 5634$
$H_2 = H(bcd) = b*7^0 +  c*7^1 + d*7^2 =98*1+99*7+100*49=5691$
$H_2 = 5691$
Üstte hash degerlerini hesapladık. Bunun için taban aritmetiğinden yararlandık. Basit olması açısından 7 tabanını göz önüne aldık. Sonra harflerin ascii degerlerini, soldan sağa doğru basamak ağırlıklarıyla çarpıp topladık.
Hash degerlerini elde ettik. $5632 \neq 5931$ olduğu için bu değerler aynı değil.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Bir süre sonra &lt;code&gt;X&lt;/code&gt;in değerinin &lt;code&gt;X=&amp;quot;bcd&amp;quot;&lt;/code&gt; olarak değiştiğini varsayalım. Tekrar karşılaştırma yapmamız gerek. Bunun için &lt;code&gt;X&lt;/code&gt;in yeni değerinin tüm karakterlerini okuyarak, son hash değerini hesaplamamıza gerek yok. Bu daha kompleks fazla sayıda karakter içeren degerler icin ciddi bir maliyet demektir. Bunun yerine daha zekice bir yöntem kullanacağız.
&lt;code&gt;X&lt;/code&gt;in degerine baktığımızda baştaki &lt;code&gt;a&lt;/code&gt; karakteri çıkartılmış ve sona &lt;code&gt;d&lt;/code&gt; karakteri eklenmiş, O halde şu adımları uygulayalım;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;baştaki &lt;code&gt;a&lt;/code&gt; karakterini kaldır. $(a*7^0+ b*7^1+c*7^2)  - a*7^0 $&lt;/li&gt;
&lt;li&gt;basamak ağırlıkları bir birim kaydığı için &lt;code&gt;7&lt;/code&gt;ye böl. $(b*7^1+c*7^2)/7 =&amp;gt; b*7^0 + c*7^1$&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d&lt;/code&gt; karakterinden gelecek degeri göz önüne al. $b*7^0 + c*7^1 + d*7^2$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bu adımlar ile birlikte $H_1&amp;rsquo; = 5691 $ olacağından dolayı
$ H_1&amp;rsquo; = H_2 $ olur. Bundan sonra hash fonksiyonumuz yeterli değilse, istersek,  maliyetli yöntem ile karşılaştırmaya devam edilebilir.&lt;/p&gt;

&lt;h4 id=&#34;kaynak&#34;&gt;&lt;strong&gt;Kaynak&lt;/strong&gt;&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Rolling_hash&#34;&gt;https://en.wikipedia.org/wiki/Rolling_hash&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-is-a-rolling-hash-and-when-is-it-useful&#34;&gt;https://www.quora.com/What-is-a-rolling-hash-and-when-is-it-useful&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>hello</title>
      <link>http://oguzhane.github.io/blog/hello/</link>
      <pubDate>Fri, 16 Dec 2016 13:20:14 +0300</pubDate>
      
      <guid>http://oguzhane.github.io/blog/hello/</guid>
      <description>&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec tempor quam lectus, vitae ultrices neque feugiat vel. Vivamus sit amet purus augue. Mauris tristique malesuada mauris, vel dapibus erat ullamcorper a. Fusce tincidunt, nulla ac dapibus tincidunt, lorem diam convallis arcu, ultrices rhoncus risus metus et nunc. Sed pellentesque venenatis lorem, ac cursus libero dictum at. Pellentesque dapibus ultricies nisl, id tincidunt libero convallis eget. Nunc et odio rhoncus, dictum lacus a, pretium est. Etiam luctus sed quam et molestie. Vivamus imperdiet urna sed mauris dictum hendrerit. Mauris vel ante nec odio cursus aliquet blandit vitae ante. Vestibulum sit amet arcu dui. Nulla dui leo, consectetur in consequat eget, hendrerit eget justo. In ut bibendum est. Mauris mauris metus, pretium in mi quis, dictum mollis mi. Nullam rutrum sem ut odio pharetra, eget pulvinar lectus scelerisque.&lt;/p&gt;

&lt;p&gt;Mauris ac pulvinar eros, et feugiat metus. Donec finibus, lectus a luctus scelerisque, massa metus tristique orci, vitae fringilla metus purus eget massa. Suspendisse potenti. Nullam neque nulla, aliquam et odio sit amet, consectetur sagittis libero. Nulla ullamcorper imperdiet augue sed tincidunt. Nunc tincidunt urna nec urna fermentum aliquam. In et dictum diam. Maecenas sagittis et dolor a posuere. Curabitur id lacus nulla. Duis luctus, metus quis pulvinar pharetra, magna tellus porttitor nisl, non rhoncus urna mauris quis felis. Pellentesque pharetra facilisis pellentesque. Sed auctor hendrerit lacus quis condimentum.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>